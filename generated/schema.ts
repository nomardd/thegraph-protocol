// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdraw must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdraw", id.toString(), this);
    }
  }

  static load(id: string): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get approvals(): Array<Bytes> | null {
    let value = this.get("approvals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set approvals(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("approvals");
    } else {
      this.set("approvals", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get done(): boolean {
    let value = this.get("done");
    return value!.toBoolean();
  }

  set done(value: boolean) {
    this.set("done", Value.fromBoolean(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get receipt(): string | null {
    let value = this.get("receipt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receipt(value: string | null) {
    if (!value) {
      this.unset("receipt");
    } else {
      this.set("receipt", Value.fromString(<string>value));
    }
  }

  get tripId(): BigInt | null {
    let value = this.get("tripId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tripId(value: BigInt | null) {
    if (!value) {
      this.unset("tripId");
    } else {
      this.set("tripId", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Trip extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trip entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Trip must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Trip", id.toString(), this);
    }
  }

  static load(id: string): Trip | null {
    return changetype<Trip | null>(store.get("Trip", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get totalAmount(): BigInt | null {
    let value = this.get("totalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalAmount(value: BigInt | null) {
    if (!value) {
      this.unset("totalAmount");
    } else {
      this.set("totalAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalExpend(): BigInt | null {
    let value = this.get("totalExpend");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalExpend(value: BigInt | null) {
    if (!value) {
      this.unset("totalExpend");
    } else {
      this.set("totalExpend", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalObtained(): BigInt | null {
    let value = this.get("totalObtained");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalObtained(value: BigInt | null) {
    if (!value) {
      this.unset("totalObtained");
    } else {
      this.set("totalObtained", Value.fromBigInt(<BigInt>value));
    }
  }

  get members(): Array<Bytes> | null {
    let value = this.get("members");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set members(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("members");
    } else {
      this.set("members", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get withdrawsIds(): Array<BigInt> | null {
    let value = this.get("withdrawsIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set withdrawsIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("withdrawsIds");
    } else {
      this.set("withdrawsIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}
